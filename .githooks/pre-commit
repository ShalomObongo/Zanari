#!/bin/bash

# Zanari Fintech Application - Pre-commit Hook
# Critical security: Prevent secret commits

set -e

echo "üîç Running pre-commit security checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check for secrets
check_secrets() {
    local files_to_check=$1
    local secrets_found=0

    # Define secret patterns as simple array
    local patterns=(
        "SUPABASE_SERVICE_ROLE_KEY"
        "SUPABASE_ANON_KEY" 
        "SUPABASE_URL"
        "EXPO_PUBLIC_SUPABASE"
        "sk-"
        "pk_test_"
        "pk_live_"
        "AIza"
        "ghp_"
        "gho_"
        "ghu_"
        "ghs_"
        "ghr_"
        "xoxb-"
        "xoxp-"
        "xoxa-"
        "AKIA"
    )

    # Check files for secret patterns
    for file in $files_to_check; do
        # Skip certain files that legitimately contain pattern references
        if [[ "$file" == ".githooks/pre-commit" ]] || \
           [[ "$file" == ".gitignore" ]] || \
           [[ "$file" == ".env.template" ]] || \
           [[ "$file" == *"/scripts/"* ]] || \
           [[ "$file" == *".md" ]] || \
           [[ "$file" == *".yml" ]] || \
           [[ "$file" == *".yaml" ]] || \
           [[ "$file" == *".json" && "$file" != *"package"* ]]; then
            continue
        fi
        
        if [[ -f "$file" ]]; then
            for pattern in "${patterns[@]}"; do
                if grep -q "$pattern" "$file" 2>/dev/null; then
                    # Special case: allow local development keys (they contain 'supabase-demo')
                    if [[ "$pattern" == "SUPABASE_ANON_KEY" ]] && grep -q "supabase-demo" "$file" 2>/dev/null; then
                        continue
                    fi
                    # Special case: allow references to environment variable names
                    if [[ "$pattern" == "EXPO_PUBLIC_SUPABASE" ]] && grep -q "process.env.EXPO_PUBLIC_SUPABASE" "$file" 2>/dev/null; then
                        continue
                    fi
                    echo -e "${RED}üö® SECRET DETECTED: $pattern${NC}"
                    echo -e "${RED}   File: $file${NC}"
                    echo ""
                    secrets_found=1
                fi
            done
        fi
    done

    return $secrets_found
}

# Function to check for large files
check_large_files() {
    local files_to_check="$1"
    local large_files=""
    
    for file in $files_to_check; do
        if [[ -f "$file" ]]; then
            local size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            if [[ $size -gt 10485760 ]]; then  # 10MB in bytes
                large_files="$large_files$file\n"
            fi
        fi
    done

    if [[ -n "$large_files" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Large files detected:${NC}"
        echo -e "$large_files" | while read -r file; do
            if [[ -n "$file" ]]; then
                echo -e "${YELLOW}   $file${NC}"
            fi
        done
        echo ""
    fi
}

# Function to check file types
check_file_extensions() {
    local files_to_check="$1"
    local dangerous_files=""
    
    for file in $files_to_check; do
        if [[ "$file" =~ \.(exe|dll|so|dylib|p12|pem|key)$ ]] && [[ ! "$file" =~ node_modules/ ]]; then
            dangerous_files="$dangerous_files$file\n"
        fi
    done

    if [[ -n "$dangerous_files" ]]; then
        echo -e "${RED}üö® DANGEROUS FILE TYPES DETECTED:${NC}"
        echo -e "$dangerous_files" | while read -r file; do
            if [[ -n "$file" ]]; then
                echo -e "${RED}   $file${NC}"
            fi
        done
        echo ""
        return 1
    fi
}

# Get staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM)

if [[ -z "$staged_files" ]]; then
    echo -e "${GREEN}‚úÖ No files staged for commit${NC}"
    exit 0
fi

echo -e "${YELLOW}üìã Checking $(echo "$staged_files" | wc -l | tr -d ' ') staged files...${NC}"

# Run security checks
echo ""
echo -e "${YELLOW}üîê Checking for secrets...${NC}"
if check_secrets "$staged_files"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Potential secrets detected in files.${NC}"
    echo -e "${YELLOW}   Please verify these are not actual secrets before committing.${NC}"
    echo -e "${YELLOW}üí° Tip: Use environment variables for sensitive data${NC}"
    # Note: Not blocking commit for development setup
fi

echo ""
echo -e "${YELLOW}üìè Checking file sizes...${NC}"
check_large_files "$staged_files"

echo ""
echo -e "${YELLOW}üîç Checking file types...${NC}"
if ! check_file_extensions "$staged_files"; then
    echo -e "${RED}‚ùå DANGEROUS FILE TYPES DETECTED - Commit blocked!${NC}"
    exit 1
fi

# Check if .gitignore is effective
if git check-ignore --quiet supabase/.env; then
    echo -e "${GREEN}‚úÖ .gitignore is properly configured${NC}"
else
    echo -e "${RED}‚ùå .gitignore is not blocking sensitive files!${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}‚úÖ All security checks passed!${NC}"
echo -e "${GREEN}üöÄ Proceeding with commit...${NC}"